// Automatically generated file, do not edit!

#pragma once
#include "mir/mir.hpp"
#include "mir/instinfo.hpp"
#include "target/{{target_name.lower()}}/InstInfoDecl.hpp"

{{target_name}}_NAMESPACE_BEGIN

{%for inst in insts %}
class {{target_name}}InstInfo{{inst.name}} final: public InstInfo {
public:
    {{target_name}}InstInfo{{inst.name}}() = default;

    uint32_t operand_num() override {
        return {{inst.operands|length}};
    }

    OperandFlag operand_flag(uint32_t idx) override{
        switch (idx) {
            {%- for idx, op in inst.operands.items() -%}
                case {{idx}}:
                    return OperandFlag{{op.flag}};
            {%- endfor -%}
            default:
                assert(false && "Invalid operand index");
        }
    }
    
    uint32_t inst_flag() override {
        return InstFlagNone 
            {%- for flag in inst.flag -%}
                | InstFlag{{flag}} 
            {%- endfor -%};
    }

    std::string_view name() {
        return "{{target_name}}.{{inst.name}}";
    }

    void print(std::ostream& out, MIRInst& inst, bool comment) override{        
        out 
        {%- for part in inst.format -%}
            <<
            {%- if part is integer -%}
                inst.operand({{part}})
            {%- else -%}
                "{{part}}"
            {%- endif -%}
        {%- endfor %};

        {%- if inst.comment|length != 0 -%}
            if (comment) {
                out 
                {%- for part in inst.comment -%}
                    {%- if part is integer -%} 
                        << inst.operand({{part}})
                    {%- else -%}
                        "{{part}}"
                    {%- endif -%}
                {%- endfor -%};
            }
        {%- endif -%}
    }


};
{% endfor %}

class {{target_name}}InstInfo final: public TargetInstInfo {
    {%- for inst in insts -%}
    {{target_name}}InstInfo{{inst.name}} _instinfo{{inst.name}};
    {%- endfor -%}
public:
    {{target_name}}InstInfo() = default;
    InstInfo& get_instinfo(uint32_t opcode) {
        switch (opcode) {
            {% for inst in insts -%}
            case {{target_name}}Inst::{{inst.name}}:
                return _instinfo{{inst.name}};
            {%- endfor %}
            default:
                return TargetInstInfo::get_instinfo(opcode);
        }
    }
};

TargetInstInfo& get{{target_name}}InstInfo() {
    static {{target_name}}InstInfo instance;
    return instance;
}
{{target_name}}_NAMESPACE_END
