// Automatically generated file, do not edit!

#pragma once
#include "mir/mir.hpp"
#include "mir/iselinfo.hpp"
#include "target/{{target_name.lower()}}/ISelInfoDecl.hpp"

{{target_name}}_NAMESPACE_BEGIN

{# matchXXX Inst format #}
{# inst is inst name? #}
{% for name in match_insts_list %}
{% if name in match_insts_dict %}
static bool match{{name}}(
    MIRInst* inst
    {% for idx, info in match_insts_dict[name].operands.items() -%}
    , MIROperand*& {{info.name}}
    {%- endfor %}
)
{
    if(inst->opcode() != {{name}})
        return false;
    {% for idx, info in match_insts_dict[name].operands.items() -%}
        {{info.name}} = inst->operand({{idx}});
    {%- endfor %}
    return true;
}
{% endif %}
{% endfor %}

{# matchAndSelectPattern #}
{% for inst, isel_item_list in isel_dict.items() -%}
/* {{inst}} matchAndSelectPattern{{inst}} begin */
{% for isel_item in isel_item_list -%}

static bool matchAndSelectPattern{{isel_item.idx}} (
    MIRInst* inst{{isel_item.match_id}},
    ISelContext& ctx)
{
    uint32_t opcode = {{isel_item.match_inst_name}};
    /* Match Inst */
    {% for match in isel_item.match_list %}
        {% if match.type == 'match_inst' -%}
            /* match inst {{match.inst_name}} */
            {% for operand_idx in match.capture_list -%}
                MIROperand* operand{{operand_idx}} = nullptr;
            {%- endfor %}
            if (not match{{match.inst_name}}(
                inst{{isel_item.match_id}}
                {%- for operand_idx in match.capture_list -%}
                   , operand{{operand_idx}}
                {%- endfor -%}
            ))  { return false; }

            {%- for lookup_idx in match.lookup_list -%}
                /* lookup inst that define the operand{{lookup_idx}} */
                auto inst{{lookup_idx}} = ctx.lookup_def(operand{{lookup_idx}});
                if (not instptr{{lookup_idx}}) { return false; }    
            {%- endfor -%}
        {% elif match.type == 'predicate' -%}
            /* match predicate for operands  */
            {%- for op in match.new_ops -%}
                MIROperand* operand{{op.idx}} = nullptr;
            {%- endfor -%}
            if(not ({{match.code}})) {
                return false;
            }
        {%- else %}
            {# not supported #}
        {%- endif %}
    {% endfor%}

    /** Select Inst **/
    {% for select in isel_item.select_list -%}
        {% if select.type =='select_inst' -%}
            /* select inst {{select.inst_name}} */
            auto inst{{select.idx}} = new MIRInst({{select.inst_name}});
            {%- for operand in select.operands -%}
                inst{{select.idx}}->set_operand({{loop.index0}}, operand{{operand}});           
            {%- endfor -%}
            {% if select.used_as_operand %} 
                auto operand{{select.idx}} = ctx.get_inst_def(inst{{select.idx}});
            {% endif%}
        {%- elif select.type == 'custom' -%}
            auto operand{{select.idx}} = (operand{{select.code}});
        {%- else -%}
            {# not supported #}
        {%- endif %}
    {% endfor %}
    ctx.insert_inst(inst{{isel_item.replace_id}});
    {%- if isel_item.replace_operand %}
        /* Replace Operand */
        ctx.replace_operand(ctx.get_inst_def(inst{{isel_item.match_id}}), 
                            ctx.get_inst_def(inst{{isel_item.replace_id}}));
    {% else %}
    {% endif -%}
    ctx.remove_inst(inst{{isel_item.match_id}});
    std::cout << "    {{inst}} success!" << std::endl;
    return true;
} 
{% endfor %}
/* {{inst}} matchAndSelectPattern{{inst}}end */

{% endfor %}



static bool matchAndSelectImpl(MIRInst* inst, ISelContext& ctx) {
    switch (inst->opcode()) {
        {% for inst_name, isel_item_list in isel_dict.items() -%}
        case {{inst_name}}:{
            {% for isel_item in isel_item_list -%}
            if(matchAndSelectPattern{{isel_item.idx}}(inst, ctx)) 
                return true;
            {%- endfor %}
            break;
        }
        {%- endfor %}
        default:
            break;
    }
    return false;
}

class {{target_name}}ISelInfo final : public TargetISelInfo {
public:
    bool is_legal_geninst(uint32_t opcode) const override;
    bool match_select(MIRInst* inst, ISelContext& ctx) const override;
};



TargetISelInfo& get{{target_name}}ISelInfo() {
    static {{target_name}}ISelInfo iselInfo;
    return iselInfo;
}



{{target_name}}_NAMESPACE_END
