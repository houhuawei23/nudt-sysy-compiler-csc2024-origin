Target:
  name: GENERIC
  infos: [InstInfo, InstSelInfo]
InstInfo: {
    Templates: {
        # REG: is_reg()
        # VAL: is_reg || is_imm
        # INTREG: is_reg && is_int(type())
        # INTVAL: is_int(type) && is_val()
        # Template
        IntBinary: {
            # format: "{mnem} {dst}, {src1}, {src2}",
            format: [mnem, " ", 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: src1, type: INTVAL, flag: Use },
                2: { name: src2, type: INTVAL, flag: Use },
              },
            instances:
              [
                Add,
                Sub,
                Mul,
                UDiv,
                URem,
                And,
                Or,
                Xor,
                Shl,
                LShr,
                AShr,
                SMin,
                SMax,
              ],
          },

        FloatBinary: {
            # format: "{mnem} {dst}, {src1}, {src2}",
            format: [mnem, " ", 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: dst, type: FPREG, flag: Def },
                1: { name: src1, type: FPVAL, flag: Use },
                2: { name: src2, type: FPVAL, flag: Use },
              },
            instances: [FAdd, FSub, FMul, FDiv],
          },

        Unary: {
            # format: "{mnem} {dst}, {src}",
            format: [mnem, " ", 0, ", ", 1],
            operands:
              { 0: { name: dst, flag: Def }, 1: { name: src, flag: Use } },
            instances: [Neg, Abs, SExt, ZExt, Trunc, F2U, F2S, U2F, S2F, FCast],
          },
      },
    InstList: [
        Jump,
        Branch,
        Unreachable,
        # memory
        Load,
        Store,
        # arth
        Add,
        Sub,
        Mul,
        UDiv,
        URem,
        # bitwise
        And,
        Or,
        Xor,
        Shl, # logic shift left
        LShr, # logic shift right
        AShr, # arth shift right
        # Signed div/rem
        SDiv,
        SRem,
        # minmax
        SMin,
        SMax,
        # unary
        Neg,
        Abs,
        # fp
        FAdd,
        FSub,
        FMul,
        FDiv,
        FNeg,
        FAbs,
        FFma,
        # comp
        ICmp,
        FCmp,
        # conversion
        SExt,
        ZExt,
        Trunc,
        F2U,
        F2S,
        U2F,
        S2F,
        FCast,

        # misc
        Copy,
        Select,
        LoadGlobalAddress,
        LoadImm,
        LoadStackObjectAddr, # 42
        CopyFromReg,
        CopyToReg,
        LoadImmToReg,
        LoadRegFromStack,
        StoreRegToStack,
        # hhw add
        Return,
        # ISA specific
        # ISASpecificBegin,
      ],
    # instruction instances
    Instances: {
        #
        Return: { format: ["Return"], operands: {} },
        Store: {
            # format: "{mnem} {addr}, {src}, {align}"
            format: ["Store", " ", 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: addr, type: VREG, flag: Use },
                1: { name: src, type: VAL, flag: Use },
                2: { name: align, type: ALIGN, flag: Metadata },
              },
          },
        Load: {
            # format: "{mnem} {dst}, {src}, {align}"
            format: ["Load", " ", 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: dst, type: VREG, flag: Def },
                1: { name: addr, type: VREG, flag: Use },
                2: { name: align, type: ALIGN, flag: Metadata },
              },
          },
        Jump: {
            # format: "Jump {label}"
            format: ["Jump", " ", 0],
            operands: { 0: { name: label, flag: Metadata } },
          },
        Branch: {
            # format: "Branch {cond}, {then}, {else}"
            format: ["Branch", " ", 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: cond, type: BOOL, flag: Use },
                1: { name: thenb, type: LABEL, flag: Metadata },
                2: { name: elseb, type: LABEL, flag: Metadata },
              },
          },
        Copy: {
            # format: "Copy {dst}, {src}"
            format: ["Copy", " ", 0, ", ", 1],
            operands: {
                #! type
                0: { name: dst, type: VREGorISAREG, flag: Def },
                1: { name: src, type: VREGorISAREG, flag: Use },
              },
          },
        LoadGlobalAddress: {
            # dst, reloc; Def, Metadata
            # int_reg, reloc
            # format: "LoadGlobalAddress {dst}, {reloc}"
            format: ["LoadGlobalAddress", " ", 0, ", ", 1],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: reloc, type: RELOC, flag: Metadata },
              },
          },
        LoadImm: {
            # format: "LoadImm {dst}, {imm}"
            format: ["LoadImm", " ", 0, ", ", 1],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: imm, type: IMM, flag: Metadata },
              },
          },
        LoadStackObjectAddr: {
            # format: "LoadStackObjAddr {dst}, {stack_obj}"
            format: ["LoadStackObjectAddr", " ", 0, ", ", 1],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: stack_obj, type: STACK_OBJ, flag: Metadata },
              },
          },
      },
  }

InstSelInfo: {
    # templates
    Templates: {
        IntBinaryIsel: {
            pattern: { name: pname, dst: $0, src1: $1, src2: $2 },
            replace: { name: rname, dst: $0, src1: $1, src2: $2 }, # define
            instances:
              {
                InstAdd: Add,
                InstSub: Sub,
                InstMul: Mul,
                InstUDiv: UDiv,
                InstURem: URem,
                InstAnd: And,
                InstOr: Or,
                InstXor: Xor,
                InstShl: Shl,
                InstLShr: LShr,
                InstAShr: AShr,
                InstSMin: SMin,
                InstSMax: SMax,
              },
          }, # use
        # aaa
        # LoadStoreIsel: {
        #     # define
        #     pattern: { name: pname, dst: $0, src: $1, align: $2 },
        #     # use
        #     replace: { name: rname, dst: $0, src: $1, align: $2 },
        #     instances: { InstLoad: Load, InstStore: Store },
        #   },
      },

    # { pattern: {
    #       name: InstAdd,
    #       # constraints on operands
    #       dst: $dst,
    #       lhs: { InstShl: { lhs: $lhs, rhs: $imm } },
    #       rhs: $rhs,

    #     }, replace: { name: rname, dst: $dst, src1: $lhs, src2: $rhs } },
    # instances
    Instances: [
        {
          # Return
          pattern: { name: InstReturn },
          replace: { name: Return },
        },
        {
          pattern: { name: InstLoad, dst: $dst, addr: $addr, align: $align },
          replace: { name: Load, dst: $dst, addr: $addr, align: $align },
        },

        {
          pattern: { name: InstStore, addr: $addr, src: $src, align: $align },
          replace: { name: Store, addr: $addr, src: $src, align: $align },
        },
        {
          pattern: { name: InstJump, label: $label },
          replace: { name: Jump, label: $label },
        },
        {
          pattern:
            { name: InstBranch, cond: $cond, thenb: $thenb, elseb: $elseb },
          replace: { name: Branch, cond: $cond, thenb: $thenb, elseb: $elseb },
        },
        {
          pattern: { name: InstCopy, dst: $dst, src: $src },
          replace: { name: Copy, dst: $dst, src: $src },
        },
        {
          pattern: { name: InstLoadGlobalAddress, dst: $dst, reloc: $reloc },
          replace: { name: LoadGlobalAddress, dst: $dst, reloc: $reloc },
        },
        {
          pattern: { name: InstLoadImm, dst: $dst, imm: $imm },
          replace: { name: LoadImm, dst: $dst, imm: $imm },
        },
        {
          pattern:
            { name: InstLoadStackObjectAddr, dst: $dst, stack_obj: $stack_obj },
          replace:
            { name: LoadStackObjectAddr, dst: $dst, stack_obj: $stack_obj },
        },
      ],
  }
