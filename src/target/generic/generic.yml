Target:
  name: GENERIC
  infos: [InstInfo, InstSelInfo]
InstInfo: {
    Templates: {
        # REG: is_reg()
        # VAL: is_reg || is_imm
        # INTREG: is_reg && is_int(type())
        # INTVAL: is_int(type) && is_val()
        # Template
        IntBinary: {
            # format: "{mnem} {dst}, {src1}, {src2}",
            format: [mnem, 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: src1, type: INTVAL, flag: Use },
                2: { name: src2, type: INTVAL, flag: Use },
              },
            instances:
              [
                Add,
                Sub,
                Mul,
                UDiv,
                URem,
                And,
                Or,
                Xor,
                Shl,
                LShr,
                AShr,
                SMin,
                SMax,
              ],
          },

        FloatBinary: {
            # format: "{mnem} {dst}, {src1}, {src2}",
            format: [mnem, 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: dst, type: FPREG, flag: Def },
                1: { name: src1, type: FPVAL, flag: Use },
                2: { name: src2, type: FPVAL, flag: Use },
              },
            instances: [FAdd, FSub, FMul, FDiv],
          },

        Unary: {
            # format: "{mnem} {dst}, {src}",
            format: [mnem, 0, ", ", 1],
            operands:
              { 0: { name: dst, flag: Def }, 1: { name: src, flag: Use } },
            instances: [Neg, Abs, SExt, ZExt, Trunc, F2U, F2S, U2F, S2F, FCast],
          },

        LoadStore: {
            # format: "{mnem} {dst}, {src}, {align}"
            format: [mnem, 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: dst, type: VREG, flag: Def },
                1: { name: src, type: VAL, flag: Use },
                2: { name: align, type: ALIGN, flag: Metadata },
              },
            instances: [Load, Store],
          },
      },
    # instruction instances
    Instances: {
        #
        Jump: {
            # format: "Jump {label}"
            format: ["Jump ", 0],
            operands: { 0: { name: label, flag: Metadata } },
          },
        Branch: {
            # format: "Branch {cond}, {then}, {else}"
            format: ["Branch ", 0, ", ", 1, ", ", 2],
            operands:
              {
                0: { name: cond, type: BOOL, flag: Use },
                1: { name: then, type: LABEL, flag: Metadata },
                2: { name: else, type: LABEL, flag: Metadata },
              },
          },
        Copy: {
            # format: "Copy {dst}, {src}"
            format: ["Copy ", 0, ", ", 1],
            operands: {
                #! type
                0: { name: dst, type: VREGorISAREG, flag: Def },
                1: { name: src, type: VREGorISAREG, flag: Use },
              },
          },
        LoadGlobalAddress: {
            # dst, reloc; Def, Metadata
            # int_reg, reloc
            # format: "LoadGlobalAddress {dst}, {reloc}"
            format: ["LoadGlobalAddress ", 0, ", ", 1],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: reloc, type: RELOC, flag: Metadata },
              },
          },
        LoadImm: {
            # format: "LoadImm {dst}, {imm}"
            format: ["LoadImm ", 0, ", ", 1],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: imm, type: IMM, flag: Metadata },
              },
          },
        LoadStackObjAddr: {
            # format: "LoadStackObjAddr {dst}, {stack_obj}"
            format: ["LoadStackObjAddr ", 0, ", ", 1],
            operands:
              {
                0: { name: dst, type: INTREG, flag: Def },
                1: { name: stack_obj, type: STACK_OBJ, flag: Metadata },
              },
          },
      },
  }

InstSelInfo: {
    # templates
    Templates: {},
    # instances
    Instances:
      [
        #IntBinary
        {
          pattern: { name: InstAdd, dst: $dst, lhs: $lhs, rhs: $rhs },
          replace: { name: Add, dst: $dst, src1: $lhs, src2: $rhs },
        },

        {
          pattern: { name: InstSub, dst: $dst, lhs: $lhs, rhs: $rhs },
          replace: { name: Sub, dst: $dst, src1: $lhs, src2: $rhs },
        },
        {
          pattern: { name: InstMul, dst: $dst, lhs: $lhs, rhs: $rhs },
          replace: { name: Mul, dst: $dst, src1: $lhs, src2: $rhs },
        },
      ]
      #,,
  }
