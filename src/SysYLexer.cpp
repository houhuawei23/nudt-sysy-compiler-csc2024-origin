
// Generated from SysY.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "COMMA", "CONSTLABEL", "INTTYPE", "FLOATTYPE", "SEMICOLON", "L_PARENTHESIS", 
      "R_PARENTHESIS", "L_BRACKET", "R_BRACKET", "L_BRACE", "R_BRACE", "ASSIGNMARK", 
      "VOIDTYPE", "IFKEY", "ELSEKEY", "WHILEKEY", "BREAKKEY", "CONTINUEKEY", 
      "RETURNKEY", "ADDOP", "MINUSOP", "NOTOP", "MULOP", "RELOP", "EQOP", 
      "LANDOP", "LOROP", "Identifier_nondigit", "Digit", "IDENTIFIER", "Hexadecimal_prefix", 
      "Nonzero_digit", "Octal_digit", "Hexadecimal_digit", "Decimal_const", 
      "Octal_const", "Hexadecimal_const", "INTEGER_CONST", "Digit_sequence", 
      "Sign", "Hexadecimal_digit_sequence", "Binary_exponent_part", "Exponent_part", 
      "Hexadecimal_fractional_const", "Fractional_const", "Hexadecimal_floating_const", 
      "Decimal_floating_const", "FLOATING_CONST", "WS", "COMMENT", "LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "'const'", "'int'", "'float'", "';'", "'('", "')'", "'['", 
      "']'", "'{'", "'}'", "'='", "'void'", "'if'", "'else'", "'while'", 
      "'break'", "'continue'", "'return'", "'+'", "'-'", "'!'", "", "", 
      "", "'&&'", "'||'"
    },
    std::vector<std::string>{
      "", "COMMA", "CONSTLABEL", "INTTYPE", "FLOATTYPE", "SEMICOLON", "L_PARENTHESIS", 
      "R_PARENTHESIS", "L_BRACKET", "R_BRACKET", "L_BRACE", "R_BRACE", "ASSIGNMARK", 
      "VOIDTYPE", "IFKEY", "ELSEKEY", "WHILEKEY", "BREAKKEY", "CONTINUEKEY", 
      "RETURNKEY", "ADDOP", "MINUSOP", "NOTOP", "MULOP", "RELOP", "EQOP", 
      "LANDOP", "LOROP", "IDENTIFIER", "INTEGER_CONST", "FLOATING_CONST", 
      "WS", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,33,354,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
  	1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
  	1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,
  	1,23,3,23,192,8,23,1,24,1,24,1,24,1,24,3,24,198,8,24,1,25,1,25,1,25,1,
  	26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,5,29,213,8,29,10,29,12,
  	29,216,9,29,1,30,1,30,1,30,1,30,3,30,222,8,30,1,31,1,31,1,32,1,32,1,33,
  	1,33,1,34,1,34,5,34,232,8,34,10,34,12,34,235,9,34,1,35,1,35,5,35,239,
  	8,35,10,35,12,35,242,9,35,1,36,1,36,4,36,246,8,36,11,36,12,36,247,1,37,
  	1,37,1,37,3,37,253,8,37,1,38,4,38,256,8,38,11,38,12,38,257,1,39,1,39,
  	1,40,4,40,263,8,40,11,40,12,40,264,1,41,1,41,3,41,269,8,41,1,41,1,41,
  	1,42,1,42,3,42,275,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
  	1,43,1,43,3,43,288,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
  	3,44,299,8,44,1,45,1,45,1,45,3,45,304,8,45,1,45,1,45,1,46,1,46,1,46,3,
  	46,311,8,46,1,46,1,46,3,46,315,8,46,1,47,1,47,3,47,319,8,47,1,48,1,48,
  	1,48,1,48,1,49,1,49,1,49,1,49,5,49,329,8,49,10,49,12,49,332,9,49,1,49,
  	1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,5,50,343,8,50,10,50,12,50,346,
  	9,50,1,50,3,50,349,8,50,1,50,1,50,1,50,1,50,2,330,344,0,51,1,1,3,2,5,
  	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,0,57,0,59,28,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,29,77,0,79,0,81,
  	0,83,0,85,0,87,0,89,0,91,0,93,0,95,30,97,31,99,32,101,33,1,0,11,3,0,37,
  	37,42,42,47,47,2,0,60,60,62,62,3,0,65,90,95,95,97,122,1,0,48,57,1,0,49,
  	57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,43,43,45,45,2,0,80,80,112,112,
  	2,0,69,69,101,101,3,0,9,10,13,13,32,32,361,0,1,1,0,0,0,0,3,1,0,0,0,0,
  	5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
  	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
  	0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
  	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
  	0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,59,1,0,0,0,0,75,1,0,0,0,
  	0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,
  	105,1,0,0,0,5,111,1,0,0,0,7,115,1,0,0,0,9,121,1,0,0,0,11,123,1,0,0,0,
  	13,125,1,0,0,0,15,127,1,0,0,0,17,129,1,0,0,0,19,131,1,0,0,0,21,133,1,
  	0,0,0,23,135,1,0,0,0,25,137,1,0,0,0,27,142,1,0,0,0,29,145,1,0,0,0,31,
  	150,1,0,0,0,33,156,1,0,0,0,35,162,1,0,0,0,37,171,1,0,0,0,39,178,1,0,0,
  	0,41,180,1,0,0,0,43,182,1,0,0,0,45,184,1,0,0,0,47,191,1,0,0,0,49,197,
  	1,0,0,0,51,199,1,0,0,0,53,202,1,0,0,0,55,205,1,0,0,0,57,207,1,0,0,0,59,
  	209,1,0,0,0,61,221,1,0,0,0,63,223,1,0,0,0,65,225,1,0,0,0,67,227,1,0,0,
  	0,69,229,1,0,0,0,71,236,1,0,0,0,73,243,1,0,0,0,75,252,1,0,0,0,77,255,
  	1,0,0,0,79,259,1,0,0,0,81,262,1,0,0,0,83,266,1,0,0,0,85,272,1,0,0,0,87,
  	287,1,0,0,0,89,298,1,0,0,0,91,300,1,0,0,0,93,314,1,0,0,0,95,318,1,0,0,
  	0,97,320,1,0,0,0,99,324,1,0,0,0,101,338,1,0,0,0,103,104,5,44,0,0,104,
  	2,1,0,0,0,105,106,5,99,0,0,106,107,5,111,0,0,107,108,5,110,0,0,108,109,
  	5,115,0,0,109,110,5,116,0,0,110,4,1,0,0,0,111,112,5,105,0,0,112,113,5,
  	110,0,0,113,114,5,116,0,0,114,6,1,0,0,0,115,116,5,102,0,0,116,117,5,108,
  	0,0,117,118,5,111,0,0,118,119,5,97,0,0,119,120,5,116,0,0,120,8,1,0,0,
  	0,121,122,5,59,0,0,122,10,1,0,0,0,123,124,5,40,0,0,124,12,1,0,0,0,125,
  	126,5,41,0,0,126,14,1,0,0,0,127,128,5,91,0,0,128,16,1,0,0,0,129,130,5,
  	93,0,0,130,18,1,0,0,0,131,132,5,123,0,0,132,20,1,0,0,0,133,134,5,125,
  	0,0,134,22,1,0,0,0,135,136,5,61,0,0,136,24,1,0,0,0,137,138,5,118,0,0,
  	138,139,5,111,0,0,139,140,5,105,0,0,140,141,5,100,0,0,141,26,1,0,0,0,
  	142,143,5,105,0,0,143,144,5,102,0,0,144,28,1,0,0,0,145,146,5,101,0,0,
  	146,147,5,108,0,0,147,148,5,115,0,0,148,149,5,101,0,0,149,30,1,0,0,0,
  	150,151,5,119,0,0,151,152,5,104,0,0,152,153,5,105,0,0,153,154,5,108,0,
  	0,154,155,5,101,0,0,155,32,1,0,0,0,156,157,5,98,0,0,157,158,5,114,0,0,
  	158,159,5,101,0,0,159,160,5,97,0,0,160,161,5,107,0,0,161,34,1,0,0,0,162,
  	163,5,99,0,0,163,164,5,111,0,0,164,165,5,110,0,0,165,166,5,116,0,0,166,
  	167,5,105,0,0,167,168,5,110,0,0,168,169,5,117,0,0,169,170,5,101,0,0,170,
  	36,1,0,0,0,171,172,5,114,0,0,172,173,5,101,0,0,173,174,5,116,0,0,174,
  	175,5,117,0,0,175,176,5,114,0,0,176,177,5,110,0,0,177,38,1,0,0,0,178,
  	179,5,43,0,0,179,40,1,0,0,0,180,181,5,45,0,0,181,42,1,0,0,0,182,183,5,
  	33,0,0,183,44,1,0,0,0,184,185,7,0,0,0,185,46,1,0,0,0,186,192,7,1,0,0,
  	187,188,5,62,0,0,188,192,5,61,0,0,189,190,5,60,0,0,190,192,5,61,0,0,191,
  	186,1,0,0,0,191,187,1,0,0,0,191,189,1,0,0,0,192,48,1,0,0,0,193,194,5,
  	61,0,0,194,198,5,61,0,0,195,196,5,33,0,0,196,198,5,61,0,0,197,193,1,0,
  	0,0,197,195,1,0,0,0,198,50,1,0,0,0,199,200,5,38,0,0,200,201,5,38,0,0,
  	201,52,1,0,0,0,202,203,5,124,0,0,203,204,5,124,0,0,204,54,1,0,0,0,205,
  	206,7,2,0,0,206,56,1,0,0,0,207,208,7,3,0,0,208,58,1,0,0,0,209,214,3,55,
  	27,0,210,213,3,55,27,0,211,213,3,57,28,0,212,210,1,0,0,0,212,211,1,0,
  	0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,60,1,0,0,0,216,
  	214,1,0,0,0,217,218,5,48,0,0,218,222,5,120,0,0,219,220,5,48,0,0,220,222,
  	5,88,0,0,221,217,1,0,0,0,221,219,1,0,0,0,222,62,1,0,0,0,223,224,7,4,0,
  	0,224,64,1,0,0,0,225,226,7,5,0,0,226,66,1,0,0,0,227,228,7,6,0,0,228,68,
  	1,0,0,0,229,233,3,63,31,0,230,232,3,57,28,0,231,230,1,0,0,0,232,235,1,
  	0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,70,1,0,0,0,235,233,1,0,0,0,
  	236,240,5,48,0,0,237,239,3,65,32,0,238,237,1,0,0,0,239,242,1,0,0,0,240,
  	238,1,0,0,0,240,241,1,0,0,0,241,72,1,0,0,0,242,240,1,0,0,0,243,245,3,
  	61,30,0,244,246,3,67,33,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,
  	0,0,247,248,1,0,0,0,248,74,1,0,0,0,249,253,3,69,34,0,250,253,3,71,35,
  	0,251,253,3,73,36,0,252,249,1,0,0,0,252,250,1,0,0,0,252,251,1,0,0,0,253,
  	76,1,0,0,0,254,256,3,57,28,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,
  	1,0,0,0,257,258,1,0,0,0,258,78,1,0,0,0,259,260,7,7,0,0,260,80,1,0,0,0,
  	261,263,3,67,33,0,262,261,1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,
  	265,1,0,0,0,265,82,1,0,0,0,266,268,7,8,0,0,267,269,3,79,39,0,268,267,
  	1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,3,77,38,0,271,84,1,0,
  	0,0,272,274,7,9,0,0,273,275,3,79,39,0,274,273,1,0,0,0,274,275,1,0,0,0,
  	275,276,1,0,0,0,276,277,3,77,38,0,277,86,1,0,0,0,278,279,3,81,40,0,279,
  	280,5,46,0,0,280,281,3,81,40,0,281,288,1,0,0,0,282,283,5,46,0,0,283,288,
  	3,81,40,0,284,285,3,81,40,0,285,286,5,46,0,0,286,288,1,0,0,0,287,278,
  	1,0,0,0,287,282,1,0,0,0,287,284,1,0,0,0,288,88,1,0,0,0,289,290,3,77,38,
  	0,290,291,5,46,0,0,291,292,3,77,38,0,292,299,1,0,0,0,293,294,5,46,0,0,
  	294,299,3,77,38,0,295,296,3,77,38,0,296,297,5,46,0,0,297,299,1,0,0,0,
  	298,289,1,0,0,0,298,293,1,0,0,0,298,295,1,0,0,0,299,90,1,0,0,0,300,303,
  	3,61,30,0,301,304,3,87,43,0,302,304,3,81,40,0,303,301,1,0,0,0,303,302,
  	1,0,0,0,304,305,1,0,0,0,305,306,3,83,41,0,306,92,1,0,0,0,307,315,3,89,
  	44,0,308,311,3,89,44,0,309,311,3,77,38,0,310,308,1,0,0,0,310,309,1,0,
  	0,0,311,312,1,0,0,0,312,313,3,85,42,0,313,315,1,0,0,0,314,307,1,0,0,0,
  	314,310,1,0,0,0,315,94,1,0,0,0,316,319,3,93,46,0,317,319,3,91,45,0,318,
  	316,1,0,0,0,318,317,1,0,0,0,319,96,1,0,0,0,320,321,7,10,0,0,321,322,1,
  	0,0,0,322,323,6,48,0,0,323,98,1,0,0,0,324,325,5,47,0,0,325,326,5,42,0,
  	0,326,330,1,0,0,0,327,329,9,0,0,0,328,327,1,0,0,0,329,332,1,0,0,0,330,
  	331,1,0,0,0,330,328,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,334,5,
  	42,0,0,334,335,5,47,0,0,335,336,1,0,0,0,336,337,6,49,0,0,337,100,1,0,
  	0,0,338,339,5,47,0,0,339,340,5,47,0,0,340,344,1,0,0,0,341,343,9,0,0,0,
  	342,341,1,0,0,0,343,346,1,0,0,0,344,345,1,0,0,0,344,342,1,0,0,0,345,348,
  	1,0,0,0,346,344,1,0,0,0,347,349,5,13,0,0,348,347,1,0,0,0,348,349,1,0,
  	0,0,349,350,1,0,0,0,350,351,5,10,0,0,351,352,1,0,0,0,352,353,6,50,0,0,
  	353,102,1,0,0,0,23,0,191,197,212,214,221,233,240,247,252,257,264,268,
  	274,287,298,303,310,314,318,330,344,348,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysY.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
