
// Generated from SysY.g4 by ANTLR 4.12.0


#include "SysYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "COMMA", "CONSTLABEL", "INTTYPE", "FLOATTYPE", "SEMICOLON", "L_PARENTHESIS", 
      "R_PARENTHESIS", "L_BRACKET", "R_BRACKET", "L_BRACE", "R_BRACE", "ASSIGNMARK", 
      "VOIDTYPE", "IFKEY", "ELSEKEY", "WHILEKEY", "BREAKKEY", "CONTINUEKEY", 
      "RETURNKEY", "UNARYOP", "MULOP", "ADDOP", "RELOP", "EQOP", "LANDOP", 
      "LOROP", "Identifier_nondigit", "Digit", "IDENTIFIER", "Hexadecimal_prefix", 
      "Nonzero_digit", "Octal_digit", "Hexadecimal_digit", "Decimal_const", 
      "Octal_const", "Hexadecimal_const", "INTEGER_CONST", "Digit_sequence", 
      "Sign", "Hexadecimal_digit_sequence", "Binary_exponent_part", "Exponent_part", 
      "Hexadecimal_fractional_const", "Fractional_const", "Hexadecimal_floating_const", 
      "Decimal_floating_const", "FLOATING_CONST", "WS", "COMMENT", "LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "'const'", "'int'", "'float'", "';'", "'('", "')'", "'['", 
      "']'", "'{'", "'}'", "'='", "'void'", "'if'", "'else'", "'while'", 
      "'break'", "'continue'", "'return'", "", "", "", "", "", "'&&'", "'||'"
    },
    std::vector<std::string>{
      "", "COMMA", "CONSTLABEL", "INTTYPE", "FLOATTYPE", "SEMICOLON", "L_PARENTHESIS", 
      "R_PARENTHESIS", "L_BRACKET", "R_BRACKET", "L_BRACE", "R_BRACE", "ASSIGNMARK", 
      "VOIDTYPE", "IFKEY", "ELSEKEY", "WHILEKEY", "BREAKKEY", "CONTINUEKEY", 
      "RETURNKEY", "UNARYOP", "MULOP", "ADDOP", "RELOP", "EQOP", "LANDOP", 
      "LOROP", "IDENTIFIER", "INTEGER_CONST", "FLOATING_CONST", "WS", "COMMENT", 
      "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,32,349,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,188,8,22,
  	1,23,1,23,1,23,1,23,3,23,194,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
  	1,26,1,27,1,27,1,28,1,28,1,28,5,28,209,8,28,10,28,12,28,212,9,28,1,29,
  	1,29,1,29,1,29,3,29,218,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
  	5,33,228,8,33,10,33,12,33,231,9,33,1,34,1,34,4,34,235,8,34,11,34,12,34,
  	236,1,35,1,35,4,35,241,8,35,11,35,12,35,242,1,36,1,36,1,36,3,36,248,8,
  	36,1,37,4,37,251,8,37,11,37,12,37,252,1,38,1,38,1,39,4,39,258,8,39,11,
  	39,12,39,259,1,40,1,40,3,40,264,8,40,1,40,1,40,1,41,1,41,3,41,270,8,41,
  	1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,283,8,42,
  	1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,294,8,43,1,44,1,44,
  	1,44,3,44,299,8,44,1,44,1,44,1,45,1,45,1,45,3,45,306,8,45,1,45,1,45,3,
  	45,310,8,45,1,46,1,46,3,46,314,8,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
  	1,48,5,48,324,8,48,10,48,12,48,327,9,48,1,48,1,48,1,48,1,48,1,48,1,49,
  	1,49,1,49,1,49,5,49,338,8,49,10,49,12,49,341,9,49,1,49,3,49,344,8,49,
  	1,49,1,49,1,49,1,49,2,325,339,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
  	17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
  	41,21,43,22,45,23,47,24,49,25,51,26,53,0,55,0,57,27,59,0,61,0,63,0,65,
  	0,67,0,69,0,71,0,73,28,75,0,77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,
  	29,95,30,97,31,99,32,1,0,12,3,0,33,33,43,43,45,45,3,0,37,37,42,42,47,
  	47,2,0,43,43,45,45,2,0,60,60,62,62,3,0,65,90,95,95,97,122,1,0,48,57,1,
  	0,49,57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,80,80,112,112,2,0,69,69,
  	101,101,3,0,9,10,13,13,32,32,356,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
  	0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
  	0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
  	0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
  	39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
  	0,0,0,0,51,1,0,0,0,0,57,1,0,0,0,0,73,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
  	0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,109,1,0,0,0,
  	7,113,1,0,0,0,9,119,1,0,0,0,11,121,1,0,0,0,13,123,1,0,0,0,15,125,1,0,
  	0,0,17,127,1,0,0,0,19,129,1,0,0,0,21,131,1,0,0,0,23,133,1,0,0,0,25,135,
  	1,0,0,0,27,140,1,0,0,0,29,143,1,0,0,0,31,148,1,0,0,0,33,154,1,0,0,0,35,
  	160,1,0,0,0,37,169,1,0,0,0,39,176,1,0,0,0,41,178,1,0,0,0,43,180,1,0,0,
  	0,45,187,1,0,0,0,47,193,1,0,0,0,49,195,1,0,0,0,51,198,1,0,0,0,53,201,
  	1,0,0,0,55,203,1,0,0,0,57,205,1,0,0,0,59,217,1,0,0,0,61,219,1,0,0,0,63,
  	221,1,0,0,0,65,223,1,0,0,0,67,225,1,0,0,0,69,232,1,0,0,0,71,238,1,0,0,
  	0,73,247,1,0,0,0,75,250,1,0,0,0,77,254,1,0,0,0,79,257,1,0,0,0,81,261,
  	1,0,0,0,83,267,1,0,0,0,85,282,1,0,0,0,87,293,1,0,0,0,89,295,1,0,0,0,91,
  	309,1,0,0,0,93,313,1,0,0,0,95,315,1,0,0,0,97,319,1,0,0,0,99,333,1,0,0,
  	0,101,102,5,44,0,0,102,2,1,0,0,0,103,104,5,99,0,0,104,105,5,111,0,0,105,
  	106,5,110,0,0,106,107,5,115,0,0,107,108,5,116,0,0,108,4,1,0,0,0,109,110,
  	5,105,0,0,110,111,5,110,0,0,111,112,5,116,0,0,112,6,1,0,0,0,113,114,5,
  	102,0,0,114,115,5,108,0,0,115,116,5,111,0,0,116,117,5,97,0,0,117,118,
  	5,116,0,0,118,8,1,0,0,0,119,120,5,59,0,0,120,10,1,0,0,0,121,122,5,40,
  	0,0,122,12,1,0,0,0,123,124,5,41,0,0,124,14,1,0,0,0,125,126,5,91,0,0,126,
  	16,1,0,0,0,127,128,5,93,0,0,128,18,1,0,0,0,129,130,5,123,0,0,130,20,1,
  	0,0,0,131,132,5,125,0,0,132,22,1,0,0,0,133,134,5,61,0,0,134,24,1,0,0,
  	0,135,136,5,118,0,0,136,137,5,111,0,0,137,138,5,105,0,0,138,139,5,100,
  	0,0,139,26,1,0,0,0,140,141,5,105,0,0,141,142,5,102,0,0,142,28,1,0,0,0,
  	143,144,5,101,0,0,144,145,5,108,0,0,145,146,5,115,0,0,146,147,5,101,0,
  	0,147,30,1,0,0,0,148,149,5,119,0,0,149,150,5,104,0,0,150,151,5,105,0,
  	0,151,152,5,108,0,0,152,153,5,101,0,0,153,32,1,0,0,0,154,155,5,98,0,0,
  	155,156,5,114,0,0,156,157,5,101,0,0,157,158,5,97,0,0,158,159,5,107,0,
  	0,159,34,1,0,0,0,160,161,5,99,0,0,161,162,5,111,0,0,162,163,5,110,0,0,
  	163,164,5,116,0,0,164,165,5,105,0,0,165,166,5,110,0,0,166,167,5,117,0,
  	0,167,168,5,101,0,0,168,36,1,0,0,0,169,170,5,114,0,0,170,171,5,101,0,
  	0,171,172,5,116,0,0,172,173,5,117,0,0,173,174,5,114,0,0,174,175,5,110,
  	0,0,175,38,1,0,0,0,176,177,7,0,0,0,177,40,1,0,0,0,178,179,7,1,0,0,179,
  	42,1,0,0,0,180,181,7,2,0,0,181,44,1,0,0,0,182,188,7,3,0,0,183,184,5,62,
  	0,0,184,188,5,61,0,0,185,186,5,60,0,0,186,188,5,61,0,0,187,182,1,0,0,
  	0,187,183,1,0,0,0,187,185,1,0,0,0,188,46,1,0,0,0,189,190,5,61,0,0,190,
  	194,5,61,0,0,191,192,5,33,0,0,192,194,5,61,0,0,193,189,1,0,0,0,193,191,
  	1,0,0,0,194,48,1,0,0,0,195,196,5,38,0,0,196,197,5,38,0,0,197,50,1,0,0,
  	0,198,199,5,124,0,0,199,200,5,124,0,0,200,52,1,0,0,0,201,202,7,4,0,0,
  	202,54,1,0,0,0,203,204,7,5,0,0,204,56,1,0,0,0,205,210,3,53,26,0,206,209,
  	3,53,26,0,207,209,3,55,27,0,208,206,1,0,0,0,208,207,1,0,0,0,209,212,1,
  	0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,58,1,0,0,0,212,210,1,0,0,0,
  	213,214,5,48,0,0,214,218,5,120,0,0,215,216,5,48,0,0,216,218,5,88,0,0,
  	217,213,1,0,0,0,217,215,1,0,0,0,218,60,1,0,0,0,219,220,7,6,0,0,220,62,
  	1,0,0,0,221,222,7,7,0,0,222,64,1,0,0,0,223,224,7,8,0,0,224,66,1,0,0,0,
  	225,229,3,61,30,0,226,228,3,55,27,0,227,226,1,0,0,0,228,231,1,0,0,0,229,
  	227,1,0,0,0,229,230,1,0,0,0,230,68,1,0,0,0,231,229,1,0,0,0,232,234,5,
  	48,0,0,233,235,3,63,31,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,
  	0,0,236,237,1,0,0,0,237,70,1,0,0,0,238,240,3,59,29,0,239,241,3,65,32,
  	0,240,239,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,
  	72,1,0,0,0,244,248,3,67,33,0,245,248,3,69,34,0,246,248,3,71,35,0,247,
  	244,1,0,0,0,247,245,1,0,0,0,247,246,1,0,0,0,248,74,1,0,0,0,249,251,3,
  	55,27,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,
  	0,253,76,1,0,0,0,254,255,7,2,0,0,255,78,1,0,0,0,256,258,3,65,32,0,257,
  	256,1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,80,1,
  	0,0,0,261,263,7,9,0,0,262,264,3,77,38,0,263,262,1,0,0,0,263,264,1,0,0,
  	0,264,265,1,0,0,0,265,266,3,75,37,0,266,82,1,0,0,0,267,269,7,10,0,0,268,
  	270,3,77,38,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,272,
  	3,75,37,0,272,84,1,0,0,0,273,274,3,79,39,0,274,275,5,46,0,0,275,276,3,
  	79,39,0,276,283,1,0,0,0,277,278,5,46,0,0,278,283,3,79,39,0,279,280,3,
  	79,39,0,280,281,5,46,0,0,281,283,1,0,0,0,282,273,1,0,0,0,282,277,1,0,
  	0,0,282,279,1,0,0,0,283,86,1,0,0,0,284,285,3,75,37,0,285,286,5,46,0,0,
  	286,287,3,75,37,0,287,294,1,0,0,0,288,289,5,46,0,0,289,294,3,75,37,0,
  	290,291,3,75,37,0,291,292,5,46,0,0,292,294,1,0,0,0,293,284,1,0,0,0,293,
  	288,1,0,0,0,293,290,1,0,0,0,294,88,1,0,0,0,295,298,3,59,29,0,296,299,
  	3,85,42,0,297,299,3,79,39,0,298,296,1,0,0,0,298,297,1,0,0,0,299,300,1,
  	0,0,0,300,301,3,81,40,0,301,90,1,0,0,0,302,310,3,87,43,0,303,306,3,87,
  	43,0,304,306,3,75,37,0,305,303,1,0,0,0,305,304,1,0,0,0,306,307,1,0,0,
  	0,307,308,3,83,41,0,308,310,1,0,0,0,309,302,1,0,0,0,309,305,1,0,0,0,310,
  	92,1,0,0,0,311,314,3,91,45,0,312,314,3,89,44,0,313,311,1,0,0,0,313,312,
  	1,0,0,0,314,94,1,0,0,0,315,316,7,11,0,0,316,317,1,0,0,0,317,318,6,47,
  	0,0,318,96,1,0,0,0,319,320,5,47,0,0,320,321,5,42,0,0,321,325,1,0,0,0,
  	322,324,9,0,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,326,1,0,0,0,325,323,
  	1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,329,5,42,0,0,329,330,5,47,
  	0,0,330,331,1,0,0,0,331,332,6,48,0,0,332,98,1,0,0,0,333,334,5,47,0,0,
  	334,335,5,47,0,0,335,339,1,0,0,0,336,338,9,0,0,0,337,336,1,0,0,0,338,
  	341,1,0,0,0,339,340,1,0,0,0,339,337,1,0,0,0,340,343,1,0,0,0,341,339,1,
  	0,0,0,342,344,5,13,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,
  	0,345,346,5,10,0,0,346,347,1,0,0,0,347,348,6,49,0,0,348,100,1,0,0,0,23,
  	0,187,193,208,210,217,229,236,242,247,252,259,263,269,282,293,298,305,
  	309,313,325,339,343,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysY.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  ::antlr4::internal::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
